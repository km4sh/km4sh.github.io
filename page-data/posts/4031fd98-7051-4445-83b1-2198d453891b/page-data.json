{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/4031fd98-7051-4445-83b1-2198d453891b","result":{"data":{"markdownRemark":{"id":"b8407dd4-11b0-5074-b5d1-a328d73d5235","html":"<p>自從Apple Silicon的M1芯片搭載到新型Mac電腦上以來，我們在基於Intel的Mac上面所編譯的程序則需要通過Rosetta工具來轉譯實現在Apple Silicon平臺上的運行。Xcode自從12版本以來，從底層的工具鏈到macOS應用的默認架構，都顯示出對Apple Silicion + Intel多架構編譯的友好支持。爲了避免轉譯造成的兼容性以及性能的影響，我們要更多的讓應用本地運行，而非依賴轉譯。而一個通用的二進制包含了在ARM（Apple Silicon）和x86_64（Intel）上都可本地運行的可執行代碼。</p>\n<p>這裏記錄的是對於深度學習庫<code class=\"language-text\">ncnn</code>的編譯。包括了單獨編譯可本地運行的x86<em>64、arm64以及Universal（x86</em>64 + arm64）版本的三種不同的庫。當然，如果只需要某一種編譯的話，可以直接編譯相應版本。</p>\n<p>最後的Universal部分有可直接編譯的方法，大家可以根據自己需求進行編譯。</p>\n<p>這個編譯過程是根據ncnn的Github CI流程來實現的。其中聲明了幾個CI風格的環境變量，但並沒有更改變量名稱。編譯後期需要注意區分其含義。</p>\n<p>在這一切之前，相對推薦將代碼庫切換至本文所寫時的版本。</p>\n<p>可以通過在<code class=\"language-text\">ncnn</code>代碼庫下使用下述指令來實現：</p>\n<p><code class=\"language-text\">git checkout 20210507</code></p>\n<hr>\n<h2 id=\"adding-openmp-and-vulkan-to-workspace\" style=\"position:relative;\"><a href=\"#adding-openmp-and-vulkan-to-workspace\" aria-label=\"adding openmp and vulkan to workspace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding <code class=\"language-text\">OpenMP</code> and <code class=\"language-text\">Vulkan</code> to workspace</h2>\n<p>這裏寫明了編譯安裝OpenMP以及下載VulkanSDK的過程。注意，請修改<code class=\"language-text\">GITHUB_WORKSPACE</code>指向你的工作路徑。</p>\n<h1 id=\"macos-on-apple-silicon-with-vulkan\" style=\"position:relative;\"><a href=\"#macos-on-apple-silicon-with-vulkan\" aria-label=\"macos on apple silicon with vulkan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>macOS on <em>Apple Silicon</em> with <code class=\"language-text\">Vulkan</code></h1>\n<p>這裏寫明了對搭載了Apple M1處理器的Mac計算機，並且開啓Vulkan支持，繼而進行編譯ncnn的過程。</p>\n<p>這部分內容參考的是如下CI所用的yaml文件：</p>\n<p><a href=\"https://github.com/Tencent/ncnn/blob/master/.github/workflows/macos-arm64-gpu.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tencent/ncnn</a></p>\n<h2 id=\"building-ncnn\" style=\"position:relative;\"><a href=\"#building-ncnn\" aria-label=\"building ncnn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building <code class=\"language-text\">ncnn</code></h2>\n<p>這裏說明了在部署好<code class=\"language-text\">OpenMP</code>和<code class=\"language-text\">VulkanSDK</code>之後，對<code class=\"language-text\">ncnn</code>的編譯過程。請將<code class=\"language-text\">ncnn</code>的源碼放置在<code class=\"language-text\">$GITHUB_WORKSPACE</code>目錄下（當然，如果不的話也可以，修改相應路徑指向即可）。</p>\n<h3 id=\"build-the-static-library\" style=\"position:relative;\"><a href=\"#build-the-static-library\" aria-label=\"build the static library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build the static library</h3>\n<p>這裏，與原始CI流程不同的是，將<code class=\"language-text\">OpenMP</code>和<code class=\"language-text\">VulkanSDK</code>的路徑指向重新定義了一下。並且將編譯工作路徑重命名爲<code class=\"language-text\">build-silicon</code>以區分對不同運行架構的編譯工作。會在代碼中通過備註來表明與之不同位置。</p>\n<h3 id=\"build-the-shared-library\" style=\"position:relative;\"><a href=\"#build-the-shared-library\" aria-label=\"build the shared library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build the shared library</h3>\n<p>這裏，與原始CI流程不同的是，將<code class=\"language-text\">OpenMP</code>和<code class=\"language-text\">VulkanSDK</code>的路徑指向重新定義了一下。並且將編譯工作路徑重命名爲<code class=\"language-text\">build-silicon-shared</code>以區分對不同運行架構的編譯工作。會在代碼中通過備註來表明與之不同位置。</p>\n<h1 id=\"macos-on-intel-with-vulkan\" style=\"position:relative;\"><a href=\"#macos-on-intel-with-vulkan\" aria-label=\"macos on intel with vulkan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>macOS on <em>Intel</em> with <code class=\"language-text\">Vulkan</code></h1>\n<p>這裏寫明了對搭載了Intel處理器的Mac計算機，並且開啓Vulkan支持，繼而進行編譯ncnn的過程。</p>\n<p>這部分內容參考的是如下CI所用的yaml文件：</p>\n<p><a href=\"https://github.com/Tencent/ncnn/blob/master/.github/workflows/macos-x64-gpu.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tencent/ncnn</a></p>\n<h3 id=\"build-the-static-library-1\" style=\"position:relative;\"><a href=\"#build-the-static-library-1\" aria-label=\"build the static library 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build the static library</h3>\n<p>這裏，與原始CI流程不同的是，將<code class=\"language-text\">OpenMP</code>和<code class=\"language-text\">VulkanSDK</code>的路徑指向重新定義了一下。並且將編譯工作路徑重命名爲<code class=\"language-text\">build-silicon</code>以區分對不同運行架構的編譯工作。會在代碼中通過備註來表明與之不同位置。</p>\n<h2 id=\"brew-install-protobuf-opencv3\" style=\"position:relative;\"><a href=\"#brew-install-protobuf-opencv3\" aria-label=\"brew install protobuf opencv3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brew install <code class=\"language-text\">protobuf</code>, <code class=\"language-text\">OpenCV@3</code></h2>\n<p>這是和 <strong>arm64</strong> 架構編譯不同的地方。我們需要利用<code class=\"language-text\">brew</code>安裝Protocol Buffer和OpenCV 3。</p>\n<h2 id=\"adding-openmp-and-vulkan-to-workspace-1\" style=\"position:relative;\"><a href=\"#adding-openmp-and-vulkan-to-workspace-1\" aria-label=\"adding openmp and vulkan to workspace 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding <code class=\"language-text\">OpenMP</code> and <code class=\"language-text\">Vulkan</code> to workspace</h2>\n<p>這個部分與上文提到的arm64編譯當中的 <a href=\"/4031fd987051444583b12198d453891b\">這一步</a> 相同，如果是從上面操作下來的話，可以利用之前的安裝。</p>\n<h2 id=\"building-ncnn-1\" style=\"position:relative;\"><a href=\"#building-ncnn-1\" aria-label=\"building ncnn 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building <code class=\"language-text\">ncnn</code></h2>\n<p>這裏說明了在部署好<code class=\"language-text\">OpenMP</code>和<code class=\"language-text\">VulkanSDK</code>之後，對<code class=\"language-text\">ncnn</code>的編譯過程。請將<code class=\"language-text\">ncnn</code>的源碼放置在<code class=\"language-text\">$GITHUB_WORKSPACE</code>目錄下（當然，如果不的話也可以，修改相應路徑指向即可）。</p>\n<h3 id=\"test-the-built-library\" style=\"position:relative;\"><a href=\"#test-the-built-library\" aria-label=\"test the built library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test the built library</h3>\n<p>這裏，按照CI的流程，可以選擇性測試一下所編譯的庫是否可用以及結果是否準確。需要安裝一個VulkanSDK的高級接口<code class=\"language-text\">github:google/swiftbuffer</code>。</p>\n<h3 id=\"build-the-shared-library-1\" style=\"position:relative;\"><a href=\"#build-the-shared-library-1\" aria-label=\"build the shared library 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build the shared library</h3>\n<p>這裏，與原始CI流程不同的是，將<code class=\"language-text\">OpenMP</code>的路徑指向重新定義了一下。並且將編譯工作路徑重命名爲<code class=\"language-text\">build-silicon-shared</code>以區分對不同運行架構的編譯工作。會在代碼中通過備註來表明與之不同位置。</p>\n<h1 id=\"build-as-an-universal-app-with-vulkan\" style=\"position:relative;\"><a href=\"#build-as-an-universal-app-with-vulkan\" aria-label=\"build as an universal app with vulkan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build as an Universal app with <code class=\"language-text\">Vulkan</code></h1>\n<p>這裏說明了對Universal應用進行編譯的兩種方法：</p>\n<ul>\n<li>通過<code class=\"language-text\">lipo</code>工具對不同架構下的可執行代碼進行融合；</li>\n<li>利用<code class=\"language-text\">cmake</code>生成可以自動化對兩種架構的可執行代碼融合的makefile；</li>\n</ul>\n<h2 id=\"use-lipo-to-fuse-different-libraries\" style=\"position:relative;\"><a href=\"#use-lipo-to-fuse-different-libraries\" aria-label=\"use lipo to fuse different libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use <code class=\"language-text\">lipo</code> to fuse different libraries</h2>\n<h2 id=\"use-cmake-to-compile-a-universal-library\" style=\"position:relative;\"><a href=\"#use-cmake-to-compile-a-universal-library\" aria-label=\"use cmake to compile a universal library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use <code class=\"language-text\">cmake</code> to compile a Universal library</h2>\n<h3 id=\"brew-install-protobuf-opencv3-1\" style=\"position:relative;\"><a href=\"#brew-install-protobuf-opencv3-1\" aria-label=\"brew install protobuf opencv3 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brew install <code class=\"language-text\">protobuf</code>, <code class=\"language-text\">OpenCV@3</code></h3>\n<p>這個部分與上文提到的Intel編譯當中的 <a href=\"/4031fd987051444583b12198d453891b\">這一步</a> 相同，如果是從上面操作下來的話，可以利用之前的安裝。</p>\n<h3 id=\"adding-openmp-and-vulkan-to-workspace-2\" style=\"position:relative;\"><a href=\"#adding-openmp-and-vulkan-to-workspace-2\" aria-label=\"adding openmp and vulkan to workspace 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding <code class=\"language-text\">OpenMP</code> and <code class=\"language-text\">Vulkan</code> to workspace</h3>\n<p>這個部分與上文提到的arm64編譯當中的 <a href=\"/4031fd987051444583b12198d453891b\">這一步</a> 相同，如果是從上面操作下來的話，可以利用之前的安裝。</p>\n<h3 id=\"compile-a-universal-library-directly\" style=\"position:relative;\"><a href=\"#compile-a-universal-library-directly\" aria-label=\"compile a universal library directly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile a Universal library directly</h3>","fields":{"slug":"/posts/4031fd98-7051-4445-83b1-2198d453891b","tagSlugs":["/tag/ncnn/","/tag/universal/"]},"frontmatter":{"date":"2021-05-30T06:54:00.121Z","description":"macOS上对App的编译自从Xcode 12以来就默认要求Universal了。但是我在使用ncnn的时候发现了一些可能会出错的前置库架构，所以根据ncnn的Github Workflow改了一下编译流程，在此记录。","tags":["ncnn","universal"],"title":"Apple語境中x86_64/arm64以及Universal的ncnn編譯","socialImage":null}}},"pageContext":{"slug":"/posts/4031fd98-7051-4445-83b1-2198d453891b"}},"staticQueryHashes":["251939775","401334301","825871152"]}